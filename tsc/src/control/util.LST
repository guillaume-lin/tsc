C51 COMPILER V7.09   UTIL                                                                  04/25/2008 16:22:18 PAGE 1   


C51 COMPILER V7.09, COMPILATION OF MODULE UTIL
OBJECT MODULE PLACED IN util.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE util.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /**
   2           * util.c
   3           * 
   4           * 
   5           * 
   6           * Company: Xiamen Uni-Creative Technology Corporation
   7           * Author:  Lin Jingxian(林景贤)
   8           * E-Mail:  cckk_lin@yahoo.ie
   9           * Date:    2005-07-13 19:17:34 中国标准时间
  10           * 
  11           * $log$
  12           *
  13           */
  14          #include <assert.h>
  15          #include "io.h"
  16          #include "kernel.h"
  17          #include "datastruct.h"
  18          #include "detector_set.h"
  19          
  20          /**
  21           *  获取指定端子的状态
  22           */
  23          int decode_term_status(lamp_status_t* phase, int term)
  24          {
  25   1              byte b,off;
  26   1              if(term < 1 || term > MAX_TERMINAL_COUNT)
  27   1                      return -1;
  28   1              b = (term - 1) / 4;
  29   1              off = (term - 1) % 4;
  30   1              return (phase->m_output[b] >> ((3 - off)*2)) & 0x03;
  31   1      }
  32          
  33          //w     /**
  34          //w      *  设置指定端子的状态
  35          //w      *  0 灭
  36          //w      *  1 亮
  37          //w      *  2 闪
  38          //w      */
  39          //w     int encode_term_status(phase_t* phase, int term, byte status)
  40          //w     {
  41          //w             byte b,off;
  42          //w             if(term < 1 || term > MAX_TERMINAL_COUNT)
  43          //w                     return -1;
  44          //w             b = (term - 1) / 4;
  45          //w             off = (term - 1) % 4;
  46          //w     
  47          //w             // 先清零
  48          //w             phase->m_output[b] &= ~( 0xc0 >> 2*off );
  49          //w             // 设置
  50          //w             phase->m_output[b] |= ( (status & 0x03) << 2*(3 - off) ); 
  51          //w             return 0;
  52          //w             }
  53          
  54          /**
  55           * 对应指定灯组的检测器
C51 COMPILER V7.09   UTIL                                                                  04/25/2008 16:22:18 PAGE 2   

  56           */
  57          int get_lamp_group_detector(int group, detector_set_t* set)
  58          {
  59   1              int i;
  60   1              for(i=0; i<MAX_DETECTOR_COUNT; i++){
  61   2                      if(g_config.m_detector_setting.m_lamp_group[i] == group)
  62   2                              add_set(i+1,set);
  63   2              }
  64   1              return 0;
  65   1      }
  66          /**
  67           * 判断指定的端子是否连接到绿灯
  68           * 如果是的话返回绿灯所在的灯组编号
  69           * 否则返回0
  70           */
  71          int is_term_connect_to_green(int terminal)
  72          {
  73   1              int i;
  74   1              for(i=0; i<MAX_LAMP_GROUP_COUNT; i++){
  75   2                      if(g_config.m_lamp_group_setting.m_lamp_group[i][GREEN] == terminal)
  76   2                              return (i+1);
  77   2              }
  78   1              return 0;
  79   1      }
  80          
  81          int is_term_connect_to_yellow(int terminal)
  82          {
  83   1              int i;
  84   1              for(i=0; i<MAX_LAMP_GROUP_COUNT; i++){
  85   2                      if(g_config.m_lamp_group_setting.m_lamp_group[i][YELLOW] == terminal)
  86   2                              return (i+1);
  87   2              }
  88   1              return 0;
  89   1      }
  90          
  91          //w     /**
  92          //w      *  判断指定的检测器是否启用
  93          //w      */
  94          //w     int is_detector_enable(int detector)
  95          //w     {
  96          //w             assert(detector >= 1 && detector <= MAX_DETECTOR_COUNT);
  97          //w             return g_config.m_detector_setting.m_attribute[detector-1] & 0x40;
  98          //w     }
  99          //w     /**
 100          //w      * 判断指定的检测器是否是上游检测器（即离路口远的检测器）
 101          //w      */
 102          //w     int is_detector_in_upstream(int detector)
 103          //w     {
 104          //w             assert(detector >= 1 && detector <= MAX_DETECTOR_COUNT);
 105          //w             return g_config.m_detector_setting.m_attribute[detector-1] & 0x80;
 106          //w     }
 107          //w     /**
 108          //w      * 获取检测器的灵敏度
 109          //w      */
 110          //w     int get_detector_sensitivity(int detector)
 111          //w     {
 112          //w             assert(detector >= 1 && detector <= MAX_DETECTOR_COUNT);
 113          //w             return g_config.m_detector_setting.m_attribute[detector-1] & 0x03;
 114          //w     }
 115          /**
 116           * 获取相位相关检测器
 117           *
C51 COMPILER V7.09   UTIL                                                                  04/25/2008 16:22:18 PAGE 3   

 118           * 所亮绿灯所在灯组所对应的检测器
 119           *
 120           * 输入的步伐必须是相位步不能是过渡步,否则结果为未定义
 121           */
 122          int get_phase_detector(lamp_status_t* phase,detector_set_t* set)
 123          {
 124   1              int i;
 125   1              byte group;
 126   1              for(i=0; i<MAX_TERMINAL_COUNT; i++){
 127   2                      if(decode_term_status(phase,i+1) != ON)
 128   2                              continue;
 129   2                      // 端子现在为亮
 130   2                      group = is_term_connect_to_green(i+1);
 131   2                      if(group == 0)
 132   2                              continue;
 133   2                      //端子连接到绿灯
 134   2      
 135   2                      //获取与灯组关联的检测器
 136   2                      get_lamp_group_detector(group,set);
 137   2              
 138   2              }
 139   1              return 0;
 140   1      }
 141          
 142          /**
 143           * bytearray 指向字节数组的指针
 144           * num 位值的编号
 145           * base 组成位值的位的个数
 146           */
 147          int get_bit_value(unsigned char* bytearray,int num, int base)
 148          {
 149   1              int b;
 150   1              unsigned char off;
 151   1              unsigned char mask;
 152   1      
 153   1              b = (num - 1) / (8 / base);
 154   1              off = (num - 1) % ( 8 / base);
 155   1              mask = 0xff << (8 - base);
 156   1      
 157   1              return (bytearray[b] & (mask >> off*base)) >> ( 8 - base*(off+1) );
 158   1      }
 159          //w     /**
 160          //w      * bytearray 指向字节数组的指针
 161          //w      * num 位值的编号
 162          //w      * base 组成位值的位的个数
 163          //w      * value 要设置的值
 164          //w      */
 165          //w     int set_bit_value(unsigned char* bytearray,int num, int base, int value)
 166          //w     {
 167          //w             int b;
 168          //w             unsigned char off;
 169          //w             unsigned char mask;
 170          //w     
 171          //w             b = (num - 1) / (8 / base);
 172          //w             off = (num - 1) % ( 8 / base);
 173          //w             mask = 0xff << (8 - base);
 174          //w     
 175          //w             bytearray[b] &= ~ (mask >> off*base);   // 清空
 176          //w             bytearray[b] |= (value << (8 - base)) >> off*base;                      // 设置
 177          //w             return 0;
 178          //w     }
 179          
C51 COMPILER V7.09   UTIL                                                                  04/25/2008 16:22:18 PAGE 4   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    637    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      29
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
