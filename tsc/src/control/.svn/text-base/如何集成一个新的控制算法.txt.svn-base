系统提供的基本api在kernel.h和io.h里面定义
系统提供的全局数据结构在datastruct.h里面定义


1 编写新的控制子程序

控制子程序的原形如下

int control(int mode_switch, int timer)
{
	...
	return 0;
}

mode_swtich 非零表示刚刚从别的控制模式切换到当前控制模式
timer 的取值为0-9，表示该子程序被调用时，是处于一秒钟的哪一个100ms
返回值 0 表示执行正常，-1表示执行失败，请求降级运行


控制子程序能够使用到的资源包括
a. 系统定义的全局数据结构以及kernel.h里面定义的一些辅助函数
b. io.h里面定义的跟io相关的函数(包括设置灯状态，读取检测器状态等)

控制约定
a. 要求改变灯的状态的语句应该在timer == 0 的时候执行

2 集成新的控制子程序

在datastruct.h里面新增一个控制子程序所代表的控制模式的代码
比如:
#define NEW_CONTROL  n
这里的n不应跟先前定义的其他控制模式的代码重复且取值范围在 1 - 250 之间

在kernel.c 里面
往control_mode_table里面增加一个control_mode_entry_t,指明该控制模式代码对应
的控制子程序以及相应该控制子程序的降级控制模式子程序

3 控制模式的切换
控制模式的切换由do_schedule完成

do_schedule根据当前控制模式的返回状态，同时查询是否用户设置了新的控制模式，判断
当前是否要切换控制模式

